repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1x'
    }
}

apply plugin: 'com.android.application'

apply plugin: 'me.tatarka.retrolambda'

apply plugin: 'com.neenbedankt.android-apt'

apply plugin: "jacoco"

apply plugin: 'com.github.kt3k.coveralls'

retrolambda {
    oldJdk '/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home'
//    oldJdk '/usr/lib/jvm/jdk1.7.0'
}

jacoco {
    toolVersion = "0.7.2.201409121644"

}

coveralls.jacocoReportPath = 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    jacoco {
        version = '0.7.2.201409121644'
    }

    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "it.cosenonjaviste"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 11
        versionName "2.0"
        buildConfigField "String", "CONSUMER_KEY", project.oauth_consumerKey
        buildConfigField "String", "CONSUMER_SECRET", project.oauth_consumerSecret
        buildConfigField "String", "ACCESS_TOKEN", project.oauth_accessToken
        buildConfigField "String", "ACCESS_TOKEN_SECRET", project.oauth_accessTokenSecret
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile project(':core')
    compile project(':androidMvp')
    compile project(':SuperListviewLibrary')
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.android.support:cardview-v7:21.0.3'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'com.squareup.picasso:picasso:2.5.0'
    apt 'com.google.dagger:dagger-compiler:2.0'
    apt 'org.parceler:parceler:0.2.14'

    androidTestApt 'com.google.dagger:dagger-compiler:2.0'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.0'
    androidTestCompile('com.google.dexmaker:dexmaker-mockito:1.0') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    androidTestCompile 'com.squareup.spoon:spoon-client:1.0.5'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.0') {
        exclude group: 'javax.inject', module: 'javax.inject'
        exclude group: 'com.squareup', module: 'javawriter'
    }
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
    androidTestCompile 'com.squareup.okhttp:mockwebserver:2.0.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.assertj:assertj-core:1.7.0'
}

// Define coverage source.
// If you have rs/aidl etc... add them here.
def coverageSourceDirs = [
        'src/main/java',
        'src/gen'
]

task jacocoUnitTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
    // class R is used, but usage will not be covered, so ignore this class from report
    // This differs per plugin version (0.10 -> 0.11)
    // have very different fileTrees.
    // I have added rules to Ignore Dagger/Butterknife
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['it/cosenonjaviste/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')
    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
    // We iterate through the compiled .class tree and rename $$ to $.
    doFirst {
        new File('app/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
    afterEvaluate {
        // just clean up coveralls dashboard, following reports are not of interest
        testDebug.reports.junitXml.enabled = false
    }
}

task mergeTestCodeCoverageResults(type: JacocoMerge) {
    description = 'Merge test code coverage results from junit and instrumentation test'
    destinationFile = file("build/outputs/code-coverage/merged-coverage.exec")
    doFirst {delete destinationFile}
    executionData = files('build/outputs/code-coverage/connected/coverage.ec', 'build/jacoco/testDebug.exec')
}

task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generates Jacoco coverage reports"
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: 'build/intermediates/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class',
                       '**/*$Provide*.class',
                       '**/*Parceler$*.class',
                       '**/*$Parcelable*.class',
                       '**/androidtest/**/*.class'
            ]
    )
    sourceDirectories = files(coverageSourceDirs)
    additionalSourceDirs = files(coverageSourceDirs)
    executionData = files('build/outputs/code-coverage/merged-coverage.exec')
    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
    // We iterate through the compiled .class tree and rename $$ to $.
    doFirst {
        new File('app/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}